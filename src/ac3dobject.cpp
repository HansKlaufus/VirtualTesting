/********************************************************
*** Body file for definition of class clAc3dObject
***
*** J.L. Klaufus - Haarlem 2010
**/

#include <fstream>
#include <sstream>
#include <stdlib.h>
#include <string>
#include <iostream>

#include "ac3dobject.h"
#include "ac3dsurface.h"
#include "vector.h"

using namespace std;

clAc3dObject::clAc3dObject(void)
{
}

clAc3dObject::clAc3dObject(const string theName)
{
  this->SetName(theName);
}

clAc3dObject::clAc3dObject(const clAc3dObject &source)
{
  Assign(source);
}

clAc3dObject::~clAc3dObject(void)
{
  for(unsigned int v=0; v<GetNumberVertices(false); v++) delete GetVertexPointer(v);
  for(unsigned int s=0; s<GetNumberSurfaces(false); s++) delete GetSurfacePointer(s);
  for(unsigned int k=0; k<GetNumberKids(false); k++)     delete GetKidPointer(k);

  //cerr << "DESTROYING SURFACEGRID: " << GetNumberID() << endl;
}

unsigned int clAc3dObject::GetNumberVertices(bool aggregated = false) const
{
  unsigned int numberVertices = vertexList.size();

  if(aggregated)
  {
    for(unsigned int k=0; k<GetNumberKids(false); k++)
    {
      clAc3dObject *kidObject = GetKidPointer(k);
      numberVertices += kidObject->GetNumberVertices(aggregated);
    }
  }

  return (numberVertices);
}

unsigned int clAc3dObject::GetNumberSurfaces(bool aggregated = false) const
{
  unsigned int numberSurfaces = surfaceList.size();

  if(aggregated)
  {
    for(unsigned int k=0; k<GetNumberKids(false); k++)
    {
      clAc3dObject *kidObject = GetKidPointer(k);
      numberSurfaces += kidObject->GetNumberSurfaces(aggregated);
    }
  }

  return (numberSurfaces);
}

unsigned int clAc3dObject::GetNumberKids(bool aggregated = false) const
{
  unsigned int numberKids = kidList.size();

  if(aggregated)
  {
    for(unsigned int k=0; k<GetNumberKids(false); k++)
    {
      clAc3dObject *kidObject = GetKidPointer(k);
      numberKids += kidObject->GetNumberSurfaces(aggregated);
    }
  }

  return (numberKids);
}

void clAc3dObject::GetVertices(vector<cVector*> &vertexVector, bool aggregated = false) const
{
    for(unsigned int v=0; v<GetNumberVertices(); v++)
    {
      cVector* v_Vector = GetVertexPointer(v);
      vertexVector.push_back(v_Vector);
    }

    if(aggregated)
    {
      for(unsigned int k=0; k<GetNumberKids(false); k++)
      {
        clAc3dObject *kidObject = GetKidPointer(k);
        kidObject->GetVertices(vertexVector, aggregated);
      }
    }
}

void clAc3dObject::GetSurfaceVertices(vector<vector<unsigned int> > &surfaceVertexVector, bool aggregated = false) const
{
    for(unsigned int s=0; s<GetNumberSurfaces(); s++)
    {
      clAc3dSurface* v_Surface = GetSurfacePointer(s);

      vector<unsigned int> vertices;
      for(unsigned int v=0; v<v_Surface->GetNumberVertices(); v++)
      {
          vertices.push_back(v_Surface->GetVertexIndex(v));
      }

      surfaceVertexVector.push_back(vertices);
    }

    if(aggregated)
    {
      for(unsigned int k=0; k<GetNumberKids(false); k++)
      {
        clAc3dObject *kidObject = GetKidPointer(k);
        kidObject->GetSurfaceVertices(surfaceVertexVector, aggregated);
      }
    }
}

clAc3dObject& clAc3dObject::Assign(const clAc3dObject &source)
{
  // TODO: Create clAc3dObject::Assign

  return(*this);
}

clAc3dObject& clAc3dObject::operator=(const clAc3dObject &source)
{
  return(Assign(source));
}

void clAc3dObject::WriteLegacyVTKFile(void)
{
    WriteLegacyVTKFile("ac3dObject.vtk");
}

void clAc3dObject::WriteLegacyVTKFile(const string fileName)
{
    WriteLegacyVTKFile(fileName.c_str());
}

void clAc3dObject::WriteLegacyVTKFile(const char* fileName)
{
    fstream fout;
    fout.open(fileName, ios::out);
    fout.precision(3);
    if (fout.good())
    {
      // HEADER
      fout << "# vtk DataFile Version 2.0" << endl;

      // TITLE
      fout << "Grid generated by gridLab. FileName: " << fileName << "\n";

      // DATA TYPE
      fout << "ASCII" << endl;

      // DATASET
      fout << "DATASET POLYDATA" << endl;

      // POINTS
      fout << "POINTS " << this->GetNumberVertices(true) << " double" << endl;
      WriteVTKPoints(fout, *this);
      fout << endl;

      // POLYGONS
      stringstream tempStream;
      unsigned int totalNumberVertices = 0;
      unsigned int cellListSize = WriteVTKPolygons(tempStream, *this, totalNumberVertices); // Write to temporary buffer, as to first determine the cell list size
      fout << "POLYGONS " << this->GetNumberSurfaces(true) << " " << cellListSize << endl;
      fout << tempStream.rdbuf(); // Dump temporary buffer to file
      fout << endl;

      fout.close();
    }
}

void clAc3dObject::WriteVTKPoints(iostream &fout, clAc3dObject &ac3dObject)
{
    for(unsigned int n=0; n<ac3dObject.GetNumberVertices(); n++)
    {
      cVector *v_Vector = ac3dObject.GetVertexPointer(n);

      fout << v_Vector->at(1);
      for(unsigned int r=2; r<=v_Vector->size(); r++)
      {
        fout << " " << v_Vector->at(r);
      }
      fout << endl;
    }

    for(unsigned int k=0; k<ac3dObject.GetNumberKids(); k++)
    {
      clAc3dObject *kidObject = ac3dObject.GetKidPointer(k);
      WriteVTKPoints(fout, *kidObject);
    }
}

unsigned int clAc3dObject::WriteVTKPolygons(iostream &fout, clAc3dObject &ac3dObject, unsigned int &totalNumberVertices)
{
    int cellListSize = 0;

    for(unsigned int s=0; s<ac3dObject.GetNumberSurfaces(); s++)
    {
      clAc3dSurface *ac3dSurface = ac3dObject.GetSurfacePointer(s);

      unsigned int numberVertices = ac3dSurface->GetNumberVertices();
      cellListSize = cellListSize + 1 + numberVertices;

      fout << numberVertices;
      for(unsigned int v=0; v<numberVertices; v++)
      {
        fout << " " << (totalNumberVertices+ac3dSurface->GetVertexIndex(v));
      }
      fout << endl;
    }

    totalNumberVertices += ac3dObject.GetNumberVertices(false);
    for(unsigned int k=0; k<ac3dObject.GetNumberKids(); k++)
    {
      clAc3dObject *kidObject = ac3dObject.GetKidPointer(k);
      cellListSize += WriteVTKPolygons(fout, *kidObject, totalNumberVertices);
    }

    return (cellListSize);
}

void clAc3dObject::ReadAC3DFile(const string fileName)
{
    ReadAC3DFile(fileName.c_str());
}

void clAc3dObject::ReadAC3DFile(const char* fileName)
{
    fstream file;
    file.open(fileName, ios::in);
    file.precision(3);
    if (file.good())
    {
      ParseAC3DFile(file);

      file.close();
    }
    else
    {
      cout << "ERROR in clAc3dObject::ReadAC3DFile: Could not open input file.";
    }
}

void clAc3dObject::ParseAC3DFile(fstream &file)
{
    // Read HEADER
    char header[5];
    file.get(header, 5);

    cout << "HEADER: " << header << endl;

    int version;
    file >> std::hex >> version;

    cout << "VERSION: " << version << endl;

    //TODO: Something with version number

    while(!file.eof())
    {
      ParseAC3DKid(file, *this);
    }
}

void clAc3dObject::ParseAC3DKid(fstream &file, clAc3dObject &ac3dObject)
{
    string identifier;
    file >> identifier;

    if(identifier == "MATERIAL")
    {
      // TODO: Add material to object
      string line;
      getline(file, line);
    }
    else if(identifier == "OBJECT")
    {
      clAc3dObject *childAc3dObject = new clAc3dObject();
      ParseAC3DObject(file, *childAc3dObject);
      kidList.push_back(childAc3dObject);
    }
//    else
//    {
//      string message = "Unknown indentifier: ";
//      message += identifier;
//      cout << "ERROR in clAc3dObject::ParseAC3DKid: " << message << endl;
//    }
}

void clAc3dObject::ParseAC3DObject(fstream &file, clAc3dObject &ac3dObject)
{
    string type;
    file >> type;

    string identifier;
    file >> identifier;
    while(identifier != "kids")
    {
      if(identifier == "name")
      {
        string name;
        getline(file, name);
//        file >> name;

        cout << "Parsing OBJECT: " << name << "..." << endl;
        ac3dObject.SetName(name);
      }
      else if (identifier == "data")
      {
        // TODO: data
        string line;
        getline(file, line);
        getline(file, line);
      }
      else if (identifier == "texture")
      {
        // TODO: texture
        string line;
        getline(file, line);
      }
      else if (identifier == "texrep")
      {
        // TODO: texture repeats
        string line;
        getline(file, line);
      }
      else if (identifier == "crease")
      {
        // TODO: crease
        string line;
        getline(file, line);
      }
      else if (identifier == "rot")
      {
        // TODO: rotation matrix
        string line;
        getline(file, line);
      }
      else if (identifier == "loc")
      {
        // TODO: location offset
        string line;
        getline(file, line);
      }
      else if (identifier == "url")
      {
        // TODO: url
        string line;
        getline(file, line);
      }
      else if (identifier == "numvert")
      {
        string line;
        file >> line;

        long numberVertices = atoi(line.c_str());

//        cout << "NUMBER VERTICES: " << numberVertices << endl;

        for(int v=0; v<numberVertices; v++)
        {
          double x, y, z;
          file >> x >> y >> z;

//          cout << x << " " << y << " " << z << endl;

          cVector *vertex = new cVector(x, y, z);
          ac3dObject.AddVertex(vertex);
        }
      }
      else if (identifier == "numsurf")
      {
        string line;
        file >> line;

        int numberSurfaces = atoi(line.c_str());
//        cout << "NUMBER SURFACES: " << numberSurfaces << endl;

        for(int s=0; s<numberSurfaces; s++)
        {
          clAc3dSurface *ac3dSurface = new clAc3dSurface();
          ParseAC3DSurface(file, *ac3dSurface);
          ac3dObject.AddSurface(ac3dSurface);
        }
      }
      else
      {
        string message = "Unknown indentifier: ";
        message += identifier;
        cout << "ERROR in clAc3dObject::ParseAC3DObject: " << message << endl;
      }

      file >> identifier;
    }

    string line;
    file >> line;

    int numberKids = atoi(line.c_str());

//    cout << "NUMBERKIDS: " << numberKids << endl;

    for(int k=0; k<numberKids; k++)
    {
      ParseAC3DKid(file, ac3dObject);
    }
}

void clAc3dObject::ParseAC3DSurface(fstream &file, clAc3dSurface &ac3dSurface)
{
    string identifier;
    file >> identifier;

    if(identifier != "SURF")
    {
      string message = "Expected surface, but got: ";
      message += identifier;
      cout << "ERROR in clAc3dObject::ParseAC3DSurface: " << message << endl;
    }

    int flags;
    file >> std::hex >> flags;
    // TODO: Do something with flags

    file >> identifier;
    while(identifier != "refs")
    {
      if(identifier == "mat")
      {
        // TODO: material index
        string line;
        getline(file, line);
      }
      else
      {
        cout << "ERROR in clAc3dObject::ParseAC3DSurface: Unknown indentifier." << endl;
      }

      file >> identifier;
    }

    string line;
    getline(file, line);

    int numberReferences = atoi(line.c_str());
//    cout << "NUMBER REFERENCES: " << numberReferences << endl;

    for(int r=0; r<numberReferences; r++)
    {
      string line;
      file >> line;

      int vertexIndex = atoi(line.c_str());
      ac3dSurface.AddVertexIndex(vertexIndex);

      getline(file, line); // Skip remainder of line
    }
}

